// Structs and global variables
// Struct to store position and light intensity
typedef struct {
  double x;
  double y;
  double z;
  double light_intensity;
} PositionLightIntensity;

PositionLightIntensity recorded_positions[MAX_POSITIONS]; // Array to store recorded positions
int num_recorded_positions = 0; // Counter for recorded positions

// Struct to store dead-end positions
typedef struct {
  double x;
  double y;
  double z;
} DeadEnd;

DeadEnd detected_dead_ends[25]; // Array to store detected dead ends
int num_dead_ends = 0; // Counter for detected dead ends

double initial_position[3] = {0.0, 0.0, 0.0}; // Initial position of the robot

// Utilities

// Function to smoothly transition the robot's speed
double smooth_speed(double current_speed, double target_speed) {
  return current_speed + SMOOTHING_FACTOR * (target_speed - current_speed); // Interpolation between current and target speed
}

// Function to calculate the distance between two 3D points
double distance_between_points(const double *pos1, const double *pos2) {
  return sqrt(pow(pos2[0] - pos1[0], 2) + pow(pos2[1] - pos1[1], 2) + pow(pos2[2] - pos1[2], 2)); // Euclidean distance
}

// Function to check if the robot is back at the starting position
bool is_back_at_start() {
  const double *current_position = wb_gps_get_values(wb_robot_get_device("gps")); // Get current GPS position
  double dist = distance_between_points(current_position, initial_position); // Calculate distance to initial position
  return dist < 0.5; // If the robot is within 0.5 units of the start position, it is back at start
}

// Function to check if the robot is at a dead end
bool is_dead_end(double prox_values[]) {
  bool front_wall = prox_values[7] > WALL_THRESHOLD; // Check if there's a wall in front
  bool left_wall = prox_values[1] > DEAD_END_THRESHOLD; // Check if there's a wall on the left
  bool right_wall = prox_values[5] > DEAD_END_THRESHOLD; // Check if there's a wall on the right

  if (front_wall && left_wall && right_wall) { // If all walls are detected, it's a dead end
    return true;
  }

  if ((left_wall && right_wall) && !front_wall) { // If walls are detected on the left and right, but not in front
    double front_distance = prox_values[7];
    if (front_distance > WALL_THRESHOLD && front_distance < DEAD_END_THRESHOLD) { // If front distance is small, it's a dead end
      return true;
    }
  }

  return false; // If none of the conditions for a dead end are met, it's not a dead end
}
