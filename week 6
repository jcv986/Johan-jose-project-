    //initalizing library 
#include <webots/robot.h>
#include <webots/motor.h>
#include <webots/distance_sensor.h>
#include <stdio.h>

//initializing speed and time
#define TIME_STEP 64
#define MAX_SPEED 6.28
#define PROX_SENSOR_COUNT 8

// initializing sensors
void init_sensors(WbDeviceTag prox_sensors[]) {
  char prox_sensor_name[50];
  for (int i = 0; i < PROX_SENSOR_COUNT; ++i) {
    sprintf(prox_sensor_name, "ps%d", i);
    prox_sensors[i] = wb_robot_get_device(prox_sensor_name);
    wb_distance_sensor_enable(prox_sensors[i], TIME_STEP);
  }
}

// initializing motors
void init_motors(WbDeviceTag left_motor, WbDeviceTag right_motor) {
  wb_motor_set_position(left_motor, INFINITY);
  wb_motor_set_position(right_motor, INFINITY);
  wb_motor_set_velocity(left_motor, 0.0);
  wb_motor_set_velocity(right_motor, 0.0);
}

// sensor values function
void read_sensors(WbDeviceTag prox_sensors[], bool *right_wall, bool *right_corner, bool *front_wall) {
  *right_wall = wb_distance_sensor_get_value(prox_sensors[2]) > 80;    // Right wall sensor
  *right_corner = wb_distance_sensor_get_value(prox_sensors[1]) > 80;  // Front-right corner sensor
  *front_wall = wb_distance_sensor_get_value(prox_sensors[0]) > 80;    // Front sensor
}

// motor speed function
void set_motor_speeds(WbDeviceTag left_motor, WbDeviceTag right_motor, double left_speed, double right_speed) {
  wb_motor_set_velocity(left_motor, left_speed);
  wb_motor_set_velocity(right_motor, right_speed);
}

int main(int argc, char **argv) {
  wb_robot_init();
  
  // Initializing motors again
  WbDeviceTag left_motor = wb_robot_get_device("left wheel motor");
  WbDeviceTag right_motor = wb_robot_get_device("right wheel motor");
  init_motors(left_motor, right_motor);

  // Initializing distance sensors
  WbDeviceTag prox_sensors[PROX_SENSOR_COUNT];
  init_sensors(prox_sensors);

  double left_speed = MAX_SPEED;
  double right_speed = MAX_SPEED;
  
  bool right_wall, right_corner, front_wall;

  while (wb_robot_step(TIME_STEP) != -1) {
  
    read_sensors(prox_sensors, &right_wall, &right_corner, &front_wall);
    
// Processing sensor data to adjust motor speeds
    if (front_wall) {
   //if there is a wall, turnleft
      left_speed = -MAX_SPEED;
      right_speed = MAX_SPEED;
    } else if (right_wall) {
      // keep moving forward if there is a wall in the right
      left_speed = MAX_SPEED;
      right_speed = MAX_SPEED;
    } else {
      // if there is no wall on the right, turn right slightly to get it
      left_speed = MAX_SPEED;
      right_speed = MAX_SPEED / 8;
    }

// To avoid a collision, turn left if there is an extend to your right.
    if (right_corner) {
      left_speed = MAX_SPEED / 8;
      right_speed = MAX_SPEED;
    }

    // define the motor speeds
    set_motor_speeds(left_motor, right_motor, left_speed, right_speed);
  }

  wb_robot_cleanup();
  return 0;
}
